name: Publish Nostr Event

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'events/**/*.json'
      - 'nostr-events/**/*.json'
      - 'templates/**/*.json'
  pull_request:
    types: [closed]
    branches:
      - main
      - master
    paths:
      - 'events/**/*.json'
      - 'nostr-events/**/*.json'
      - 'templates/**/*.json'

jobs:
  publish-nostr-event:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm init -y
          npm install nostr-tools@^2.5.0 ws@^8.14.0

      - name: Get changed files
        id: changed-files
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # For push events, compare with previous commit
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep -E '\.(json)$' | grep -E '(events|nostr-events|templates)/' || true)
          else
            # For merged PRs, get files changed in the PR
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E '\.(json)$' | grep -E '(events|nostr-events|templates)/' || true)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Convert to JSON array for matrix strategy
          if [ -n "$CHANGED_FILES" ]; then
            FILES_JSON=$(echo "$CHANGED_FILES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "files=$FILES_JSON" >> $GITHUB_OUTPUT
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "files=[]" >> $GITHUB_OUTPUT
            echo "has_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Nostr publisher script
        if: steps.changed-files.outputs.has_files == 'true'
        run: |
          cat > publish-nostr.js << 'EOF'
          const fs = require('fs');
          
          async function publishNostrEvent(templatePath, nsec) {
            try {
              console.log(`Processing template: ${templatePath}`);
              
              // Import nostr-tools with error handling
              let nostrTools;
              try {
                nostrTools = require('nostr-tools');
              } catch (error) {
                console.error('Failed to import nostr-tools:', error.message);
                throw new Error('nostr-tools import failed');
              }
              
              // Import the correct modules
              const { finalizeEvent } = require('nostr-tools/pure');
              const { Relay } = require('nostr-tools/relay');
              const { useWebSocketImplementation } = require('nostr-tools/relay');
              const nip19 = require('nostr-tools/nip19');
              
              // Setup WebSocket for Node.js
              const WebSocket = require('ws');
              useWebSocketImplementation(WebSocket);
              
              // Read the event template
              const template = JSON.parse(fs.readFileSync(templatePath, 'utf8'));
              
              // Decode the private key
              const { type, data } = nip19.decode(nsec);
              if (type !== 'nsec') {
                throw new Error('Invalid nsec format');
              }
              const privateKey = data;
              
              // Create the event template
              const eventTemplate = {
                kind: template.kind || 1,
                created_at: Math.floor(Date.now() / 1000),
                tags: template.tags || [],
                content: template.content || '',
              };
              
              console.log('Event template:', JSON.stringify(eventTemplate, null, 2));
              
              // Finalize the event (this will add pubkey, id, and sig)
              const event = finalizeEvent(eventTemplate, privateKey);
              
              console.log('Finalized event ID:', event.id);
              console.log('Event pubkey:', event.pubkey);
              
              // Default relays (can be overridden in template)
              const defaultRelays = [
                'wss://relay.damus.io',
                'wss://nos.lol',
                'wss://relay.nostr.band',
                'wss://nostr-pub.wellorder.net',
                'wss://relay.current.fyi'
              ];
              
              const relays = template.relays || defaultRelays;
              
              console.log(`Publishing to ${relays.length} relays...`);
              
              // Publish to each relay individually - relay.publish() returns a Promise
              const publishResults = await Promise.allSettled(
                relays.map(async (relayUrl) => {
                  console.log(`Publishing to ${relayUrl}...`);
                  
                  try {
                    const relay = await Relay.connect(relayUrl);
                    console.log(`Connected to ${relayUrl}`);
                    
                    // relay.publish() returns a Promise that resolves when published
                    await relay.publish(event);
                    console.log(`‚úÖ Successfully published to ${relayUrl}`);
                    
                    relay.close();
                    return relayUrl;
                    
                  } catch (error) {
                    console.log(`‚ùå Error with ${relayUrl}: ${error.message}`);
                    throw new Error(`Failed to publish to ${relayUrl}: ${error.message}`);
                  }
                })
              );
              
              const successful = publishResults.filter(r => r.status === 'fulfilled').length;
              const failed = publishResults.filter(r => r.status === 'rejected').length;
              
              console.log(`\nPublication summary:`);
              console.log(`‚úÖ Successful: ${successful}/${relays.length}`);
              console.log(`‚ùå Failed: ${failed}/${relays.length}`);
              
              // Log failed relays for debugging
              publishResults.forEach((result, index) => {
                if (result.status === 'rejected') {
                  console.log(`‚ùå ${relays[index]}: ${result.reason.message}`);
                }
              });
              
              if (successful === 0) {
                throw new Error('Failed to publish to any relays');
              }
              
              console.log(`\nüéâ Event published successfully to ${successful} relay(s)!`);
              console.log(`Event ID: ${event.id}`);
              
              // Give some time for connections to close
              await new Promise(resolve => setTimeout(resolve, 1000));
              
            } catch (error) {
              console.error('Error publishing Nostr event:', error);
              console.error('Stack trace:', error.stack);
              process.exit(1);
            }
          }
          
          // Get command line arguments
          const templatePath = process.argv[2];
          const nsec = process.env.NOSTR_NSEC;
          
          if (!templatePath) {
            console.error('Usage: node publish-nostr.js <template-path>');
            process.exit(1);
          }
          
          if (!nsec) {
            console.error('NOSTR_NSEC environment variable is required');
            process.exit(1);
          }
          
          publishNostrEvent(templatePath, nsec);
          EOF

      - name: Publish Nostr events
        if: steps.changed-files.outputs.has_files == 'true'
        env:
          NOSTR_NSEC: ${{ secrets.NOSTR_NSEC }}
        run: |
          FILES='${{ steps.changed-files.outputs.files }}'
          echo "Processing files: $FILES"
          
          # Parse JSON array and process each file
          echo "$FILES" | jq -r '.[]' | while read -r file; do
            if [ -f "$file" ]; then
              echo "Publishing Nostr event from: $file"
              node publish-nostr.js "$file"
              echo "---"
            else
              echo "File not found: $file"
            fi
          done

      - name: Summary
        if: steps.changed-files.outputs.has_files == 'true'
        run: |
          echo "‚úÖ Nostr event publication workflow completed"
          echo "üìù Processed files: ${{ steps.changed-files.outputs.files }}"
          echo "üîë Used NOSTR_NSEC from repository secrets"